// Mocks generated by Mockito 5.4.6 from annotations
// in barmate/test/user_screens/loggedin_user_profile/profile_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:barmate/auth/auth_service.dart' as _i3;
import 'package:barmate/controllers/loggedin_user_profile_controller.dart'
    as _i6;
import 'package:barmate/model/favourite_drink_model.dart' as _i7;
import 'package:barmate/repositories/favourite_drinks_repository.dart' as _i4;
import 'package:barmate/repositories/loggedin_user_profile_repository.dart'
    as _i5;
import 'package:barmate/Utils/user_shared_preferences.dart' as _i11;
import 'package:flutter/material.dart' as _i10;
import 'package:logger/logger.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLogger_0 extends _i1.SmartFake implements _i2.Logger {
  _FakeLogger_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuthService_1 extends _i1.SmartFake implements _i3.AuthService {
  _FakeAuthService_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFavouriteDrinkRepository_2 extends _i1.SmartFake
    implements _i4.FavouriteDrinkRepository {
  _FakeFavouriteDrinkRepository_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeLoggedinUserProfileRepository_3 extends _i1.SmartFake
    implements _i5.LoggedinUserProfileRepository {
  _FakeLoggedinUserProfileRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

/// A class which mocks [LoggedinUserProfileController].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggedinUserProfileController extends _i1.Mock
    implements _i6.LoggedinUserProfileController {
  MockLoggedinUserProfileController() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Logger get logger =>
      (super.noSuchMethod(
            Invocation.getter(#logger),
            returnValue: _FakeLogger_0(this, Invocation.getter(#logger)),
          )
          as _i2.Logger);

  @override
  _i3.AuthService get authService =>
      (super.noSuchMethod(
            Invocation.getter(#authService),
            returnValue: _FakeAuthService_1(
              this,
              Invocation.getter(#authService),
            ),
          )
          as _i3.AuthService);

  @override
  _i4.FavouriteDrinkRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeFavouriteDrinkRepository_2(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i4.FavouriteDrinkRepository);

  @override
  _i5.LoggedinUserProfileRepository get userProfileRepository =>
      (super.noSuchMethod(
            Invocation.getter(#userProfileRepository),
            returnValue: _FakeLoggedinUserProfileRepository_3(
              this,
              Invocation.getter(#userProfileRepository),
            ),
          )
          as _i5.LoggedinUserProfileRepository);

  @override
  List<_i7.FavouriteDrink> get favouriteDrinks =>
      (super.noSuchMethod(
            Invocation.getter(#favouriteDrinks),
            returnValue: <_i7.FavouriteDrink>[],
          )
          as List<_i7.FavouriteDrink>);

  @override
  set userTitle(String? _userTitle) => super.noSuchMethod(
    Invocation.setter(#userTitle, _userTitle),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<String> getUserBio() =>
      (super.noSuchMethod(
            Invocation.method(#getUserBio, []),
            returnValue: _i8.Future<String>.value(
              _i9.dummyValue<String>(this, Invocation.method(#getUserBio, [])),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<String> loadUserTitle() =>
      (super.noSuchMethod(
            Invocation.method(#loadUserTitle, []),
            returnValue: _i8.Future<String>.value(
              _i9.dummyValue<String>(
                this,
                Invocation.method(#loadUserTitle, []),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<void> loadFavouriteDrinks() =>
      (super.noSuchMethod(
            Invocation.method(#loadFavouriteDrinks, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  void removeFavouriteDrink(int? index) => super.noSuchMethod(
    Invocation.method(#removeFavouriteDrink, [index]),
    returnValueForMissingStub: null,
  );

  @override
  _i8.Future<void> logout(_i10.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#logout, [context]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> logoutConfiramtionTooltip(_i10.BuildContext? context) =>
      (super.noSuchMethod(
            Invocation.method(#logoutConfiramtionTooltip, [context]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [UserPreferences].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserPreferences extends _i1.Mock implements _i11.UserPreferences {
  MockUserPreferences() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setUserName(String? userName) =>
      (super.noSuchMethod(
            Invocation.method(#setUserName, [userName]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setUserId(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#setUserId, [id]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setUserTitle(String? title) =>
      (super.noSuchMethod(
            Invocation.method(#setUserTitle, [title]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  String getUserName() =>
      (super.noSuchMethod(
            Invocation.method(#getUserName, []),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#getUserName, []),
            ),
          )
          as String);

  @override
  String getUserId() =>
      (super.noSuchMethod(
            Invocation.method(#getUserId, []),
            returnValue: _i9.dummyValue<String>(
              this,
              Invocation.method(#getUserId, []),
            ),
          )
          as String);

  @override
  _i8.Future<void> clear() =>
      (super.noSuchMethod(
            Invocation.method(#clear, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}
